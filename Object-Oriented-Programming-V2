#### let op als p1 geactiveerd wordt word k3 juist gedeactiveerd ipv geactiveerd

import numpy as np


class enzymes: #creating parent class enzymes which holds the 
    def __init__(self,threshold):
        self.threshold=threshold
        
    def function(self):
        pass
    

class k1(enzymes): #create class of enzyme k1
    def __init__(self,threshold):
        super().__init__(threshold)
    
    def activation_function_k1(self,input): #define 
        value=sum(input)
        if value> self.threshold:
            output=value
        else:
            output=0
        return output

class k2(enzymes):
    def __init__(self,threshold):
        super().__init__(threshold)

    def activation_function_k2(self,input):
        input=[input]
        x=sum(input)/len(input)
        if x > self.threshold:
            value = x+self.threshold
            output=value
        else:
            output=0
        return output

class k3(enzymes):
    def __init__(self,threshold):
        super().__init__(threshold)
    
    def activation_function_k3(self,input):
        input=[input]
        x=sum(input)/len(input)
        if x > self.threshold:
            value = x-self.threshold
            output=value
        else:
            output=0
        return output
    
class p1(enzymes):
    def __init__(self,threshold):
        super().__init__(threshold)

    def activation_function_p1(self,input):
        input=[input]
        x=sum(input)/len(input)
        if x > self.threshold:
            value = 1/(1+np.exp(x-self.threshold))
            output = value
        else:
            output = 0
        return output

class c(enzymes):
    def __init__(self,threshold):
        super().__init__(threshold)

    def activation_function_c(self,input):
        x=min(input)
        if x >self.threshold:
            output=x
        else:
            output=0
        return output

class a(enzymes):
    def __init__(self,threshold):
        super().__init__(threshold)

    def activation_function_a(self,input):
        input=[input]
        x=sum(input)/len(input)
        if x > self.threshold:
            output= 1
        else:
            output = 0
        print(output)       
        return bool(output)

def simulation(r1,r2):
    enzyme_K1=k1(1)
    enzyme_K2=k2(0.2)
    enzyme_K3=k3(0.01)
    enzyme_P1=p1(0.1)
    enzyme_C=c(0.15)
    apoptose=a(0.1)

    input=[r1,r2]
    z=enzyme_K1.activation_function_k1(input)
    b=enzyme_P1.activation_function_p1(z)
    q=enzyme_K2.activation_function_k2(z)
    d=enzyme_K3.activation_function_k3(b)
    cd=[q,d]
    e=enzyme_C.activation_function_c(cd)
    f=apoptose.activation_function_a(e)
    return f

simulation(0.7,0.8)
    


